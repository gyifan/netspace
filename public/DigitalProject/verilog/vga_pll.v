// File vga_pll.vhd translated with vhd2vl v2.4 VHDL to Verilog RTL translator
// vhd2vl settings:
//  * Verilog Module Declaration Style: 1995

// vhd2vl is Free (libre) Software:
//   Copyright (C) 2001 Vincenzo Liguori - Ocean Logic Pty Ltd
//     http://www.ocean-logic.com
//   Modifications Copyright (C) 2006 Mark Gonzales - PMC Sierra Inc
//   Modifications (C) 2010 Shankar Giri
//   Modifications Copyright (C) 2002, 2005, 2008-2010 Larry Doolittle - LBNL
//     http://doolittle.icarus.com/~larry/vhd2vl/
//
//   vhd2vl comes with ABSOLUTELY NO WARRANTY.  Always check the resulting
//   Verilog for correctness, ideally with a formal verification tool.
//
//   You are welcome to redistribute vhd2vl under certain conditions.
//   See the license (GPLv2) file included with the source for details.

// The result of translation follows.  Its copyright status should be
// considered unchanged from the original VHDL.

// megafunction wizard: %ALTPLL%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: altpll 
// ============================================================
// File Name: vga_pll.vhd
// Megafunction Name(s):
// 			altpll
//
// Simulation Library Files(s):
// 			altera_mf
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 10.0 Build 262 08/18/2010 SP 1 SJ Full Version
// ************************************************************
//Copyright (C) 1991-2010 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.
// no timescale needed

module vga_pll(
inclk0,
c0,
c1
);

input inclk0;
output c0;
output c1;

wire inclk0;
wire c0;
wire c1;


wire clkfb;
wire clk25;

  assign c0 = clkfb;
  assign c1 = clk25;
  DCM_SP #(
      .CLKDV_DIVIDE(2.0),
    .CLKFX_DIVIDE(1),
    .CLKFX_MULTIPLY(2),
    .CLKIN_DIVIDE_BY_2(FALSE),
    .CLKIN_PERIOD(20.0),
    .CLKOUT_PHASE_SHIFT(4'b NONE),
    .CLK_FEEDBACK(2'b 1X),
    .DESKEW_ADJUST(18'b SYSTEM_SYNCHRONOUS),
    .DLL_FREQUENCY_MODE(3'b LOW),
    .DUTY_CYCLE_CORRECTION(TRUE),
    .PHASE_SHIFT(0),
    .STARTUP_WAIT(FALSE))
  DCM_SP_inst(
      .CLK0(clkfb),
    .CLK180(/* open */),
    .CLK270(/* open */),
    // 270 degree DCM CLK output
    .CLK2X(/* open */),
    // 2X DCM CLK output
    .CLK2X180(/* open */),
    // 2X, 180 degree DCM CLK out
    .CLK90(/* open */),
    // 90 degree DCM CLK output
    .CLKDV(clk25),
    // Divided DCM CLK out (CLKDV_DIVIDE)
    .CLKFX(/* open */),
    // DCM CLK synthesis out (M/D)
    .CLKFX180(/* open */),
    // 180 degree CLK synthesis out
    .LOCKED(/* open */),
    // DCM LOCK status output
    .PSDONE(/* open */),
    // Dynamic phase adjust done output
    .STATUS(/* open */),
    // 8-bit DCM status bits output
    .CLKFB(CLKFB),
    // DCM clock feedback
    .CLKIN(inclk0),
    // Clock input (from IBUFG, BUFG or DCM)
    .PSCLK(1'b 0),
    // Dynamic phase adjust clock input
    .PSEN(1'b 0),
    // Dynamic phase adjust enable input
    .PSINCDEC(1'b 0),
    // Dynamic phase adjust increment/decrement
    .RST(1'b 0));

    // DCM asynchronous reset input

endmodule
